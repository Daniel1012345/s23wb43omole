{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","config","connectionString","process","env","MONGO_CON","mongoose","connect","useUnifiedTopology","useNewUrlParser","boardRouter","gridbuildRouter","indexRouter","Musicals","usersRouter","musicalsRouter","recreateDB","instance1","instance2","instance3","regeneratorRuntime","async","_context","prev","next","awrap","locals","error","instrument_type","brand","cost","status","render","then","doc","console","log","err","save","stop","db","on","bind","once","selectorRouter","app","set","path","join","__dirname","resourceRouter","logger","use","json","connection","extended","res","message"],"mappings":"aAAA,IAAIA,YAAcC,QAAQ,eACtBC,QAAUD,QAAQ,WADlBD,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAErBA,QAAIE,UAAYC,SAMhB,IAAMC,iBAAmBC,QAAQC,IAAIC,UALrCC,SAAUR,QAAGA,YAObQ,SAASC,QAAQL,iBAAiB,CAHlCJ,iBAAkBG,EAKhBO,oBAAoB,IAFtBF,IAAAA,YAAiBJ,QAAAA,kBACfO,YAAeX,QADiB,kBAEhCU,eAAkBV,QAAE,oBAFtBY,YAAAZ,QAAA,kBASIa,gBAAkBb,QAAQ,sBAJ1Bc,eAAcd,QAAQ,qBAMtBe,SAAWf,QAAQ,oBALnBgB,eAAchB,QAAQ,qBACtBiB,IAAAA,UACAL,GAAAA,SAAcZ,WAwChB,SAAAkB,aAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAEIC,SAAOC,cAFX,KAAA,EAYIV,EAAY,IAAIJ,SAAS,CAACe,gBAAgB,SAAUC,MAAM,SAASC,KAAK,OAPxEC,EAAWA,IAAAA,SAAf,CAAAH,gBAAA,QAAAC,MAAA,SAAAC,KAAA,QACIE,EAAO,IAAXnB,SAAA,CAAAe,gBAAA,eAAAC,MAAA,OAAAC,KAAA,QAGFb,EAAeD,OAAfiB,KAAA,SAAAC,GAAAC,QAAAC,IAAA,wBAAA,MAAA,SAAAC,GAAAF,QAAAR,MAAAU,KAAAnB,EAAAoB,OAgBGL,KAAK,SAAAC,GAhBRC,QAAAC,IAAA,yBAAA,MAGgCR,SAAAA,GAA0BC,QAAAA,MAAMQ,KAAjClB,EAH/BmB,OAIMpB,KAAAA,SAAAA,GAA0BU,QAAAA,IAAAA,wBADD,MACyCE,SAAAA,GAAzCK,QAJ/BR,MAAAU,KATE,KAAA,EAAA,IAAA,MAAA,OAAAf,EAAAiB,UAvCFC,GAAAC,GAAI9B,QAAAA,QAAkBb,MAAO4C,KAACP,QAAA,8BAU9BK,GAAGG,KAAK,OAAQ,WAThBR,QAAIS,IAAAA,gCAaJC,IAAIC,IAAI,QAASC,KAAKC,KAAKC,UAAW,UAXtCJ,IAAIK,IAAAA,cAAiBpD,OAErB+C,IAAIA,IAAGM,OAAGpD,QAaV8C,IAAIO,IAAIrD,QAAQsD,QAXhBR,IAAIL,IAAEzC,QAAGO,WAASgD,CAYWC,UAX7B,KAYAV,IAAIO,IAAIpD,gBAXRwC,IAAGC,IAAG1C,QAASoC,OAAQR,KAARqB,KAAAC,UAA4B,YAEzCd,IAAAA,IAAAA,YAAYe,gBAA8BL,IAE5CO,IAAA,IAAAxC,aAYAiC,IAAIO,IAAI,SAAUtC,aAXlB+B,IAAIC,IAAI,WAASC,gBACjBF,IAAIC,IAAI,SAAApC,aAERmC,IAAIO,IAAID,aAARxC,iBACAkC,IAAIO,IAAIrD,YAAA6C,gBAERC,IAAIO,IAAIpD,SAAAA,EAARwD,EAAAhC,GACAqB,EAAAhD,YAAe,QAKfgD,IAAIO,IAAI,SAAAf,EAAYtB,EAAAA,EAAAA,GAEpB8B,EAAIO,OAAIK,QAAc9C,EAAAA,QACtBkC,EAAIO,OAAIzB,MAGR,gBAHqBiB,EAAAA,IAAAA,IAAAA,OAGrBP,EAAA,GAEEb,EAAIO,OAAClC,EAAAA,QAAL,KADF2D,EAIAxB,OAAA,WAgBgEH,IAAAA,QAAAA,EAAaC,QAAAA,aAG3Eb,OAAAA,QAAAA","file":"app.min.js","sourcesContent":["var createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\n\n\n\nrequire('dotenv').config();\nconst connectionString = process.env.MONGO_CON;\nmongoose = require('mongoose');\nmongoose.connect(connectionString,{\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar musicalsRouter = require('./routes/musical');\nvar boardRouter = require('./routes/board');\nvar gridbuildRouter = require('./routes/gridbuild');\nvar selectorRouter = require('./routes/selector');\nvar Musicals = require(\"./models/musical\");\nvar resourceRouter = require(\"./routes/resource\");\n\nvar app = express();\n//Get the default connection\nvar db = mongoose.connection;\n//Bind connection to error event\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\ndb.once(\"open\", function(){\n  console.log(\"Connection to DB succeeded\")});\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/resource', resourceRouter)\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/musical', musicalsRouter);\napp.use('/board', boardRouter);\napp.use('/gridbuild', gridbuildRouter);\napp.use('/selector', selectorRouter)\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n// We can seed the collection if needed on server start\nasync function recreateDB(){\n// Delete everything\n  await Musicals.deleteMany();\n  let instance1 = new Musicals({instrument_type:\"Guiter\", brand:'Yamaha',cost:25.4});\n  let instance2 = new Musicals({instrument_type:\"Piano\", brand:'Yamaha',cost:250.4});\n  let instance3 = new Musicals({instrument_type:\"Talking drum\", brand:'Sony',cost:200.4});\n\n  \n  instance1.save()\n  .then(doc=> {\n    console.log(\"First object saved\")\n  })\n  .catch(err=>{\n      console.error(err)\n  })\n  instance2.save()\n  .then(doc=> {\n    console.log(\"Second object saved\")\n  })\n  .catch(err=>{\n      console.error(err)\n  })\n  instance3.save()\n  .then(doc=> {\n    console.log(\"Third object saved\")\n  })\n  .catch(err=>{\n      console.error(err)\n  })\n}\nlet reseed = true;\nif (reseed) {recreateDB();}\n\nmodule.exports = app;\n"]}